#compdef fwd

# fwd ...
#
# db <options>          backup, restore, or compare DBs in dotenv files.
# init                  initialize a project.
# explain               explains the current context.
# config, c <options>   gets or sets variables in dotenv file.
# list, ls <options>    list project dotenv files.
# rm <options>          remove project dotenv file.
# switch, s <options>   switch the project's dotenv file.
#
# Use 'fwd <subcommand> --help' for additional information.
#
# OPTIONS:
#
#     --project <string>    specify the project name.
#     --root <string>       specify the path to `fwd` artifacts.
#     --squelch             squelch errors
#     --format <standard|json>
#                           format
#     --help                display this list of options.
function _fwd() {
  local line state

  _arguments -C \
    '1: :->cmds'\
    '*::arg:->args'

  case $state in
    cmds)
      _values 'Forward (fwd)' \
        'backup[backs up a DB]' \
        'restore[restores a DB backup]' \
        'init[initialize a project]' \
        'explain[explains the current context]' \
        'config[gets or sets variables in a dotenv file]' \
        'c[gets or sets variables in a dotenv file]' \
        'db[backup, restore, or compare DBs in dotenv files]' \
        'ls[list project dotenv files]' \
        'rm[remove a dotenv file]' \
        's[switch the project dotenv file]' \
        '--project[specify the project name]' \
        '--root[specify path to `fwd` artifacts]' \
        '--squelch[squelch errors]' \
        '--format[standard or json]' \
        '--help[display list of options and arguments]'
    ;;
    *)
      case $line[1] in
        c|config)
          _fwd_config
        ;;
        db)
          _fwd_db
        ;;
        rm)
          dotenvs=($(fwd --squelch ls -t))
          _arguments "*:dotenv:($dotenvs)"
        ;;
        s)
          dotenvs=($(fwd --squelch ls -t))
          _arguments "*:dotenv:($dotenvs)"
        ;;
      esac
    ;;
  esac
}

# fwd config ...
#
# get, g <options>      gets a variable from the current dotenv.
# get-many, gm <options>
#                       gets 1+ variables from the current dotenv.
# compare, c <options>  compares 1+ variables across dotenv files.
function _fwd_config() {
  local line state

  _arguments -C \
    '1: :->cmds' \
    '*::arg:->args'

  case $state in
    cmds)
      _values 'fwd config' \
        'g[gets a variable from the current dotenv]' \
        'get[gets a variable from the current dotenv]' \
        'get-many[gets 1+ variables from the current dotenv]' \
        'gm[gets 1+ variables from the current dotenv]' \
        'c[compares 1+ variables across dotenv files]' \
        'compare[compares 1+ variables across dotenv files]'
    ;;
  esac
}

# fwd db ...
#
# counts, c <options>   compare row counts by table for each dotenv.
# backup, b <options>   backs up the DB (by arg or env value).
# backup-all, ba        backs up the DB listed in each dotenv.
# restore, r <options>  restores a DB backup generated by backup or backup-all.
# list-tables, lt <options>
#                       list tables in the DB (by arg or env value).
function _fwd_db() {
  local line state

  _arguments -C \
    '1: :->cmds'\
    '*::arg:->args'

  case $state in
    cmds)
      _values 'fwd db' \
        'backup[backs up the DB (by arg or env value)]' \
        'b[backs up the DB (by arg or env value)]' \
        'backup-all[backs up the DB listed in each dotenv]' \
        'ba[backs up the DB listed in each dotenv]' \
        'counts[compare row counts by table for each dotenv]' \
        'c[compare row counts by table for each dotenv]' \
        'list-tables[list tables in the DB (by arg or env value)]' \
        'lt[list tables in the DB (by arg or env value)]' \
        'restore[restores a DB backup]' \
        'r[restores a DB backup]'
    ;;
    *)
      case $line[1] in
        c|counts)
          tables=($(fwd --squelch db lt -t))
          _arguments "*:dotenv:($tables)"
        ;;
      esac
    ;;
  esac
}
